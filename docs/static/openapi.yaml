openapi: 3.0.1
info:
  title: Szampchat server api
  version: "0.1"
servers:
- url: http://localhost:8081/api
  description: Local server
paths:
  /channels/{channelId}:
    put:
      tags:
      - Channel
      summary: Edit channel
      operationId: editChannel
      parameters:
      - name: channelId
        in: path
        description: ID of channel
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonPatch"
        required: true
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelFullInfoDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of channel's community or resource is
            not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
      x-permissions:
      - CHANNEL_MODIFY
    delete:
      tags:
      - Channel
      summary: Delete channel
      operationId: deleteChannel
      parameters:
      - name: channelId
        in: path
        description: ID of channel
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "204":
          description: No Content
        "419":
          description: User not created
        "403":
          description: User is not a member of channel's community or resource is
            not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
      x-permissions:
      - CHANNEL_MODIFY
  /users:
    post:
      tags:
      - User
      summary: Register user
      description: |
        Used to create user object in backend server on first login.
        Only route that doesn't throw 419 error.
        To obtain bearer token, check Basics/Authentication page or KeyCloak documentation.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
    delete:
      tags:
      - User
      summary: Delete user
      operationId: deleteUser
      responses:
        "204":
          description: No Content
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /livekit/webhook:
    post:
      tags:
      - live-kit-event-controller
      operationId: handleWebhook
      requestBody:
        content:
          application/webhook+json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
  /communities:
    get:
      tags:
      - Community
      summary: Get user's communities
      description: Retrieves communities of logged in user
      operationId: getUserCommunities
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommunityDTO"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
    post:
      tags:
      - Community
      summary: Create community
      description: |-
        Creates new community with current user as a owner.
        New members can be invited using (link to other endpoints)
      operationId: createCommunity
      requestBody:
        content:
          application/json:
            schema:
              required:
              - community
              type: object
              properties:
                community:
                  $ref: "#/components/schemas/CommunityCreateRequest"
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Community"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /communities/{communityId}/roles:
    post:
      tags:
      - Role
      summary: Create role
      operationId: createRole
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithMembersDTO"
        "419":
          description: User not created
        "403":
          description: User is not an owner of community or resource is not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
      x-permissions:
      - ADMINISTRATOR
  /communities/{communityId}/join:
    post:
      tags:
      - Community
      summary: Join community
      description: |-
        Uses invitation link (it's id) to join community as current user.
        This action result in expiration of invitation. (?)
      operationId: joinCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JoinRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityMember"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
        "403":
          description: User is already a member of community or resource is not available
      security:
      - OAuthSecurity: []
  /communities/{communityId}/invite:
    post:
      tags:
      - Community
      summary: Create invite link
      description: |-
        Creates temporary or permanent(?) invitation link to community.
        This invitation can then be shared with any user, who can then join given community
      operationId: inviteToCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationResponseDTO"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
        "403":
          description: User is not an owner of community or resource is not available
      security:
      - OAuthSecurity: []
      x-permissions:
      - INVITE_CREATE
  /communities/{communityId}/channels:
    post:
      tags:
      - Channel
      summary: Create channel
      operationId: createChannel
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChannelCreateRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of community or resource is not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
      x-permissions:
      - CHANNEL_CREATE
  /channels/{channelId}/messages:
    get:
      tags:
      - Message
      summary: Get channel's messages
      operationId: getMessages
      parameters:
      - name: channelId
        in: path
        description: ID of channel
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      - name: before
        in: query
        description: Get messages before this message Snowflake ID
        required: false
        schema:
          type: integer
          format: int64
        example: 21388369783160832
      - name: limit
        in: query
        description: Max number of messages
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
        example: 10
      - name: messages
        in: query
        description: List of messages to retrieve. Ignores other parameters if set
        required: false
        schema:
          maxItems: 10
          minItems: 0
          type: array
          items:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of channel's community or resource is
            not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
    post:
      tags:
      - Message
      summary: Create message
      operationId: createMessage
      parameters:
      - name: channelId
        in: path
        description: ID of channel
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      requestBody:
        content:
          application/json:
            schema:
              required:
              - message
              type: object
              properties:
                message:
                  $ref: "#/components/schemas/MessageCreateRequest"
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of channel's community or resource is
            not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
      x-permissions:
      - MESSAGE_CREATE
  /channels/{channelId}/messages/{messageId}/reactions:
    post:
      tags:
      - reaction-controller
      operationId: createReaction
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: messageId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactionUpdateRequest"
        required: true
      responses:
        "200":
          description: OK
      x-permissions:
      - REACTION_CREATE
    delete:
      tags:
      - reaction-controller
      operationId: deleteReaction
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: messageId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactionUpdateRequest"
        required: true
      responses:
        "200":
          description: OK
  /users/description:
    patch:
      tags:
      - User
      summary: Edit description?
      operationId: editDescription
      parameters:
      - name: descriptionDTO
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/UserDescriptionDTO"
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /users/avatar:
    patch:
      tags:
      - User
      summary: Edit avatar? TODO
      operationId: editAvatar
      requestBody:
        content:
          application/json:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
      security:
      - OAuthSecurity: []
  /communities/{communityId}:
    get:
      tags:
      - Community
      summary: Get community
      operationId: getCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of community or resource is not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
    delete:
      tags:
      - Community
      summary: Delete community
      description: Removes community
      operationId: deleteCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "204":
          description: No Content
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
        "403":
          description: User is not an owner of community or resource is not available
      security:
      - OAuthSecurity: []
    patch:
      tags:
      - Community
      summary: Edit community
      description: Edits community
      operationId: editCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      requestBody:
        content:
          application/json:
            schema:
              required:
              - community
              - file
              type: object
              properties:
                community:
                  $ref: "#/components/schemas/CommunityEditRequest"
                file:
                  type: string
                  format: binary
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityDTO"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
        "403":
          description: User is not an owner of community or resource is not available
      security:
      - OAuthSecurity: []
      x-permissions:
      - ADMINISTRATOR
  /communities/{communityId}/roles/{roleId}:
    delete:
      tags:
      - Role
      summary: Delete role
      operationId: deleteRole
      parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
        "419":
          description: User not created
        "403":
          description: User is not an owner of community or resource is not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
      x-permissions:
      - ADMINISTRATOR
    patch:
      tags:
      - Role
      summary: Edit role
      description: Uses json patch to edit RoleWithMembersDTO
      operationId: editRole
      parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/JsonPatchSchema"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithMembersDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of channel's community or resource is
            not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
      x-permissions:
      - ADMINISTRATOR
  /channels/{channelId}/messages/{messageId}:
    delete:
      tags:
      - Message
      summary: Delete message
      operationId: deleteMessage
      parameters:
      - name: channelId
        in: path
        description: ID of channel
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      - name: messageId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
        "419":
          description: User not created
        "403":
          description: User is not a member of channel's community or resource is
            not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
    patch:
      tags:
      - Message
      summary: Edit message
      operationId: editMessage
      parameters:
      - name: channelId
        in: path
        description: ID of channel
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      - name: messageId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageEditRequest"
        required: true
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "419":
          description: User not created
        "403":
          description: User is not a member of channel's community or resource is
            not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /users/{userId}:
    get:
      tags:
      - User
      summary: Get user
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: ID of user
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /users/me:
    get:
      tags:
      - User
      summary: Get current user
      description: |
        Retrieves current user's data
      operationId: getMe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /roles/{roleId}:
    get:
      tags:
      - Role
      summary: Get role
      operationId: getRole
      parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithMembersDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of role's community or resource is not
            available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /file/{fileId}:
    get:
      tags:
      - file-controller
      operationId: getFile
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
  /communities/{communityId}/info:
    get:
      tags:
      - Community
      summary: Get full community
      description: |-
        Retrieve all required information about community.
        Ideally it should be used once when opening community
        and then updated using websocket events
      operationId: getFullCommunityInfo
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullCommunityInfoDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of community or resource is not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /channels/{channelId}/voice/join:
    get:
      tags:
      - voice-channel-controller
      summary: Join voice channel
      operationId: joinChannel
      parameters:
      - name: channelId
        in: path
        description: ID of channel
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoiceTokenResponse"
        "419":
          description: User not created
        "403":
          description: User is not a member of community or resource is not available
        "401":
          description: Incorrect token scope (token not provided?)
components:
  schemas:
    JsonPatch:
      type: object
    ChannelDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        communityId:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - TEXT_CHANNEL
          - VOICE_CHANNEL
    ChannelFullInfoDTO:
      type: object
      properties:
        channel:
          $ref: "#/components/schemas/ChannelDTO"
        overwrites:
          type: array
          items:
            $ref: "#/components/schemas/ChannelRoleOverwriteDTO"
        participants:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
    ChannelRoleOverwriteDTO:
      type: object
      properties:
        roleId:
          type: integer
          format: int64
        overwrites:
          type: integer
          format: int64
    UserCreateRequest:
      required:
      - username
      type: object
      properties:
        username:
          maxLength: 32
          minLength: 0
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID of user
          format: int64
          example: 4501678724218880
        username:
          type: string
          description: User name
          example: User123
        imageUrl:
          type: string
          description: Relative path to image (or uuid)
          format: uuid
        description:
          type: string
          description: Short message which describes user
          example: My description
    CommunityCreateRequest:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          minLength: 0
          type: string
          description: Name of community
          example: My community
    Community:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        ownerId:
          type: integer
          format: int64
        imageUrl:
          type: string
          format: uuid
        basePermissions:
          type: integer
          format: int32
    RoleCreateRequest:
      required:
      - name
      - permissionOverwrites
      type: object
      properties:
        name:
          maxLength: 64
          minLength: 0
          type: string
        permissionOverwrites:
          type: integer
          format: int64
        members:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
    RoleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        permissionOverwrites:
          type: integer
          format: int64
        community:
          type: integer
          format: int64
    RoleWithMembersDTO:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/RoleDTO"
        members:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
    JoinRequest:
      type: object
      properties:
        invitationId:
          type: integer
          description: Valid ID of invitation
          format: int64
          example: 29754971884879870
    CommunityMember:
      type: object
      properties:
        communityId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    InvitationResponseDTO:
      type: object
      properties:
        link:
          type: string
          description: Invitation link to community
          example: community/4501678724218880/join/29754971884879870
    ChannelCreateRequest:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          minLength: 0
          type: string
        type:
          type: string
          enum:
          - TEXT_CHANNEL
          - VOICE_CHANNEL
    MessageCreateRequest:
      required:
      - communityId
      - text
      type: object
      properties:
        text:
          maxLength: 65535
          minLength: 0
          type: string
        communityId:
          type: integer
          format: int64
        respondsToMessage:
          type: integer
          format: int64
        gifLink:
          maxLength: 255
          minLength: 0
          pattern: ^(http|https)://.*\.(gif|png|jpg|jpeg|webp)$
          type: string
    MessageAttachmentDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID of attachment
          format: int64
          example: 4501678724218880
        size:
          type: integer
          description: Size of file in bytes
          format: int32
          example: 2048
        name:
          type: string
          description: ID of attachment
          example: myfile.txt
        path:
          type: string
          description: Path to file
          example: uploads/messages/random_file_name.png
    MessageDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID of message
          format: int64
          example: 4501678724218880
        text:
          type: string
          description: Content of message
          example: My message content
        updated_at:
          type: string
          description: When message was updated
          format: date-time
        respondsToMessage:
          type: integer
          description: ID of message which this message responds to
          format: int64
          example: 4501678724218880
        gifLink:
          type: string
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/MessageAttachmentDTO"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ReactionOverviewDTO"
        channelId:
          type: integer
          description: ID of message's text channel
          format: int64
          example: 4501678724218880
        userId:
          type: integer
          description: ID of user that sent message
          format: int64
          example: 4501678724218880
    ReactionOverviewDTO:
      type: object
      properties:
        emoji:
          type: string
        count:
          type: integer
          format: int32
        me:
          type: boolean
    ReactionUpdateRequest:
      type: object
      properties:
        emoji:
          type: string
    UserDescriptionDTO:
      type: object
      properties:
        description:
          type: string
    CommunityEditRequest:
      type: object
      properties:
        name:
          type: string
        basePermissions:
          type: integer
          format: int32
    CommunityDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID of community
          format: int64
          example: 4501678724218880
        name:
          type: string
          description: Name of community
          example: My community
        ownerId:
          type: integer
          description: ID of community's owner
          format: int64
          example: 29754971884879872
        imageUrl:
          type: string
          format: uuid
        basePermissions:
          type: integer
          format: int32
    JsonPatchSchema:
      required:
      - op
      - path
      - value
      type: object
      properties:
        op:
          type: string
          enum:
          - replace
          - add
          - remove
          - copy
          - move
          - test
        path:
          type: string
          example: /name
        value:
          type: string
    MessageEditRequest:
      required:
      - text
      type: object
      properties:
        text:
          maxLength: 65535
          minLength: 0
          type: string
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        updated_at:
          type: string
          format: date-time
        respondsToMessage:
          type: integer
          format: int64
        gifLink:
          type: string
        channelId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    CommunityMemberRolesDTO:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserDTO"
        roles:
          uniqueItems: true
          type: array
          description: Roles of user in given community
          items:
            type: integer
            description: ID of role
            format: int64
            example: 8518649245597696
    FullCommunityInfoDTO:
      type: object
      properties:
        community:
          $ref: "#/components/schemas/CommunityDTO"
        channels:
          type: array
          items:
            $ref: "#/components/schemas/ChannelFullInfoDTO"
        members:
          type: array
          items:
            $ref: "#/components/schemas/CommunityMemberRolesDTO"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleNoCommunityDTO"
    RoleNoCommunityDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        permissionOverwrites:
          type: integer
          format: int64
    VoiceTokenResponse:
      type: object
      properties:
        token:
          type: string
  securitySchemes:
    OAuthSecurity:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://url.com/auth
          scopes: {}
