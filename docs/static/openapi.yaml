openapi: 3.0.1
info:
  title: Szampchat server api
  version: "0.1"
servers:
- url: http://localhost:8081/api
  description: Local server
paths:
  /channels/{channelId}:
    put:
      tags:
      - channel-controller
      operationId: editChannel
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Channel"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
    delete:
      tags:
      - channel-controller
      operationId: deleteChannel
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /users:
    post:
      tags:
      - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
    delete:
      tags:
      - user-controller
      operationId: deleteUser
      responses:
        "200":
          description: OK
  /roles:
    post:
      tags:
      - role-controller
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreateDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /communities:
    get:
      tags:
      - Community
      summary: Get user's communities
      description: Retrieves communities of logged in user
      operationId: getUserCommunities
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Community"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
    post:
      tags:
      - Community
      summary: Create community
      description: |-
        Creates new community with current user as a owner.
        New members can be invited using (link to other endpoints)
      operationId: createCommunity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunityCreateDTO"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Community"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /communities/{communityId}/join:
    post:
      tags:
      - Community
      summary: Join community
      description: |-
        Uses invitation link (it's id) to join community as current user.
        This action result in expiration of invitation. (?)
      operationId: joinCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JoinRequestDTO"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityMember"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
        "403":
          description: User is already a member of community or resource is not available
      security:
      - OAuthSecurity: []
  /communities/{communityId}/invite:
    post:
      tags:
      - Community
      summary: Create invite link
      description: |-
        Creates temporary or permanent(?) invitation link to community.
        This invitation can then be shared with any user, who can then join given community
      operationId: inviteToCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationResponseDTO"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
        "403":
          description: User is not an owner of community or resource is not available
      security:
      - OAuthSecurity: []
  /channels:
    post:
      tags:
      - channel-controller
      operationId: createChannel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChannelCreateDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
  /channels/{channelId}/messages:
    get:
      tags:
      - message-controller
      summary: Get messages for given channel
      operationId: getMessages
      parameters:
      - name: channelId
        in: path
        description: Snowflake ID of text channel
        required: true
        schema:
          type: integer
          format: int64
        example: 20276884193411072
      - name: before
        in: query
        description: Get messages before this message Snowflake ID
        required: false
        schema:
          type: integer
          format: int64
        example: 21388369783160832
      - name: limit
        in: query
        description: Max number of messages
        required: false
        schema:
          type: integer
          format: int32
        example: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageDTO"
    post:
      tags:
      - message-controller
      operationId: createMessage
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageCreateDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /users/description:
    patch:
      tags:
      - user-controller
      operationId: editDescription
      parameters:
      - name: descriptionDTO
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/UserDescriptionDTO"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
  /users/avatar:
    patch:
      tags:
      - user-controller
      operationId: editAvatar
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
  /roles/{roleId}:
    get:
      tags:
      - role-controller
      operationId: getRole
      parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Role by given ID was not found
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
      - role-controller
      operationId: deleteRole
      parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    patch:
      tags:
      - role-controller
      operationId: editRole
      parameters:
      - name: roleId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreateDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /communities/{communityId}:
    get:
      tags:
      - Community
      summary: Get community
      operationId: getCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunityDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of community or resource is not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
    delete:
      tags:
      - Community
      summary: Delete community
      description: Removes community
      operationId: deleteCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "204":
          description: No Content
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
        "403":
          description: User is not an owner of community or resource is not available
      security:
      - OAuthSecurity: []
    patch:
      tags:
      - Community
      summary: Edit community
      description: Edits community
      operationId: editCommunity
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Community"
        required: true
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Community"
        "419":
          description: User not created
        "401":
          description: Incorrect token scope (token not provided?)
        "403":
          description: User is not an owner of community or resource is not available
      security:
      - OAuthSecurity: []
  /channels/{channelId}/messages/{messageId}:
    delete:
      tags:
      - message-controller
      operationId: deleteMessage
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: messageId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
    patch:
      tags:
      - message-controller
      operationId: editMessage
      parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: messageId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditMessageDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /users/{userId}:
    get:
      tags:
      - user-controller
      operationId: getUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
  /users/me:
    get:
      tags:
      - user-controller
      operationId: getMe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
  /communities/{communityId}/roles:
    get:
      tags:
      - role-controller
      operationId: getRolesForCommunity
      parameters:
      - name: communityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /communities/{communityId}/info:
    get:
      tags:
      - Community
      summary: Get full community
      description: |-
        Retrieve all required information about community.
        Ideally it should be used once when opening community
        and then updated using websocket events
      operationId: getFullCommunityInfo
      parameters:
      - name: communityId
        in: path
        description: ID of community
        required: true
        schema:
          type: integer
          format: int64
        example: "4501678724218880"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullCommunityInfoDTO"
        "419":
          description: User not created
        "403":
          description: User is not a member of community or resource is not available
        "401":
          description: Incorrect token scope (token not provided?)
      security:
      - OAuthSecurity: []
  /communities/{communityId}/channels:
    get:
      tags:
      - channel-controller
      operationId: getChannelsForCommunity
      parameters:
      - name: communityId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChannelDTO"
components:
  schemas:
    Channel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        communityId:
          type: integer
          format: int64
        type:
          type: string
          format: byte
    UserCreateDTO:
      type: object
      properties:
        username:
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        imageUrl:
          type: string
        description:
          type: string
    RoleCreateDTO:
      type: object
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        permission:
          type: integer
          format: int64
        community:
          type: integer
          format: int64
    CommunityCreateDTO:
      type: object
      properties:
        name:
          type: string
    Community:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        ownerId:
          type: integer
          format: int64
        imageUrl:
          type: string
    JoinRequestDTO:
      type: object
      properties:
        invitationId:
          type: integer
          description: Valid ID of invitation
          format: int64
          example: 29754971884879870
    CommunityMember:
      type: object
      properties:
        communityId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    InvitationResponseDTO:
      type: object
      properties:
        link:
          type: string
          description: Invitation link to community
          example: community/4501678724218880/join/29754971884879870
    ChannelCreateDTO:
      type: object
      properties:
        communityId:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          enum:
          - TEXT_CHANNEL
          - VOICE_CHANNEL
    MessageCreateDTO:
      type: object
      properties:
        text:
          type: string
        communityId:
          type: integer
          format: int64
        respondsToMessage:
          type: integer
          format: int64
        gifLink:
          type: string
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        updated_at:
          type: string
          format: date-time
        respondsToMessage:
          type: integer
          format: int64
        gifLink:
          type: string
        channelId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    UserDescriptionDTO:
      type: object
      properties:
        description:
          type: string
    EditMessageDTO:
      type: object
      properties:
        text:
          type: string
    CommunityDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID of community
          format: int64
          example: 4501678724218880
        name:
          type: string
          example: My community
        ownerId:
          type: integer
          description: ID of community's owner
          format: int64
          example: 29754971884879872
        imageUrl:
          type: string
          example: img/myimage.png
    CommunityMemberRolesDTO:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserDTO"
        roles:
          uniqueItems: true
          type: array
          description: Roles of user in given community
          items:
            type: integer
            description: ID of role
            format: int64
            example: 8518649245597696
    FullCommunityInfoDTO:
      type: object
      properties:
        community:
          $ref: "#/components/schemas/CommunityDTO"
        channels:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
        members:
          type: array
          items:
            $ref: "#/components/schemas/CommunityMemberRolesDTO"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
    ChannelDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        community:
          type: integer
          format: int64
        type:
          type: integer
          format: int32
    MessageAttachmentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        name:
          type: string
    MessageDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        updated_at:
          type: string
          format: date-time
        respondsToMessage:
          type: integer
          format: int64
        gifLink:
          type: string
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/MessageAttachmentDTO"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ReactionPreviewDTO"
        channelId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
    ReactionPreviewDTO:
      type: object
      properties:
        emoji:
          type: string
        count:
          type: integer
          format: int32
        me:
          type: boolean
  securitySchemes:
    OAuthSecurity:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://url.com/auth
          scopes: {}
